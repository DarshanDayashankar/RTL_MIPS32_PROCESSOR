$date
	Sun Jun 23 20:26:36 2019
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module MIPS_PROCESSOR_tb $end
$var reg 1 ! CLK $end
$var reg 1 " FORWARDING_EN $end
$var reg 1 # RESET $end
$scope module uut $end
$var wire 1 ! CLK $end
$var wire 1 " FORWARD_EN $end
$var wire 1 $ IF_flush $end
$var wire 1 # RESET $end
$var wire 1 % clock $end
$var wire 1 & write_back_enable_WB $end
$var wire 1 ' write_back_enable_MEM $end
$var wire 1 ( write_back_enable_ID $end
$var wire 1 ) write_back_enable_EXE $end
$var wire 5 * source2_reg_bank_ID [4:0] $end
$var wire 5 + source2_forward_ID [4:0] $end
$var wire 5 , source2_forward_EXE [4:0] $end
$var wire 5 - source1_forward_EXE [4:0] $end
$var wire 5 . source1_ID [4:0] $end
$var wire 32 / register2_ID [31:0] $end
$var wire 32 0 register1_ID [31:0] $end
$var wire 4 1 operator_ID [3:0] $end
$var wire 4 2 operator_EXE [3:0] $end
$var wire 2 3 operand2_sel [1:0] $end
$var wire 32 4 operand2_ID [31:0] $end
$var wire 32 5 operand2_EXE [31:0] $end
$var wire 2 6 operand1_sel [1:0] $end
$var wire 32 7 operand1_ID [31:0] $end
$var wire 32 8 operand1_EXE [31:0] $end
$var wire 1 9 is_immediate $end
$var wire 32 : instruction_IF [31:0] $end
$var wire 32 ; insruction_ID [31:0] $end
$var wire 1 < hazard_detected $end
$var wire 5 = destination_WB [4:0] $end
$var wire 5 > destination_MEM [4:0] $end
$var wire 5 ? destination_EXE [4:0] $end
$var wire 32 @ dataMEM_out_WB [31:0] $end
$var wire 32 A dataMEM_out_MEM [31:0] $end
$var wire 1 B branch_taken_ID $end
$var wire 1 C branch_taken_EXE $end
$var wire 2 D branch_command [1:0] $end
$var wire 32 E WB_result [31:0] $end
$var wire 1 F SW_or_BNE $end
$var wire 2 G SW_operand_sel [1:0] $end
$var wire 32 H SW_operand_MEM [31:0] $end
$var wire 32 I SW_operand_EXE_PIPE_MEM [31:0] $end
$var wire 32 J SW_operand_EXE [31:0] $end
$var wire 32 K PC_MEM [31:0] $end
$var wire 32 L PC_IF [31:0] $end
$var wire 32 M PC_ID [31:0] $end
$var wire 32 N PC_EXE [31:0] $end
$var wire 1 O MEM_write_enbale_ID $end
$var wire 1 P MEM_write_enable_MEM $end
$var wire 1 Q MEM_write_enable_EXE $end
$var wire 1 R MEM_read_enable_WB $end
$var wire 1 S MEM_read_enable_MEM $end
$var wire 1 T MEM_read_enable_ID $end
$var wire 1 U MEM_read_enable_EXE $end
$var wire 32 V ALU_result_WB [31:0] $end
$var wire 32 W ALU_result_MEM [31:0] $end
$var wire 32 X ALU_result_EXE [31:0] $end
$scope module exe_pipe_mem_register $end
$var wire 1 % CLK $end
$var wire 1 # RESET $end
$var wire 1 ) WB_EN_IN $end
$var wire 32 Y SW_OPERAND_IN [31:0] $end
$var wire 32 Z PC_IN [31:0] $end
$var wire 1 Q MEM_WRITE_EN_IN $end
$var wire 1 U MEM_READ_EN_IN $end
$var wire 5 [ DESTINATION_IN [4:0] $end
$var wire 32 \ ALU_RESULT_IN [31:0] $end
$var reg 32 ] ALU_RESULT_OUT_REG [31:0] $end
$var reg 5 ^ DESTINATION_OUT_REG [4:0] $end
$var reg 1 S MEM_READ_EN_OUT_REG $end
$var reg 1 P MEM_WRITE_EN_OUT_REG $end
$var reg 32 _ PC_OUT_REG [31:0] $end
$var reg 32 ` SW_OPERAND_OUT_REG [31:0] $end
$var reg 1 ' WB_EN_OUT_REG $end
$upscope $end
$scope module exe_stage_unit $end
$var wire 32 a ALU_RESULT_MEM [31:0] $end
$var wire 1 % CLK $end
$var wire 32 b alu_operand2 [31:0] $end
$var wire 32 c alu_operand1 [31:0] $end
$var wire 2 d SW_OPERAND_SEL [1:0] $end
$var wire 32 e SW_OPERAND_OUT [31:0] $end
$var wire 32 f SW_OPERAND_IN [31:0] $end
$var wire 32 g RESULT_WB [31:0] $end
$var wire 2 h OPERAND2_SEL [1:0] $end
$var wire 32 i OPERAND2 [31:0] $end
$var wire 2 j OPERAND1_SEL [1:0] $end
$var wire 32 k OPERAND1 [31:0] $end
$var wire 32 l ALU_RESULT [31:0] $end
$var wire 4 m ALU_OPERATOR [3:0] $end
$scope module alu $end
$var wire 1 % CLK $end
$var wire 4 n OPERATOR [3:0] $end
$var wire 32 o OPERAND2 [31:0] $end
$var wire 32 p OPERAND1 [31:0] $end
$var reg 32 q ALU_OUT [31:0] $end
$upscope $end
$scope module mux_SW_operand $end
$var wire 32 r MUX3_IN2 [31:0] $end
$var wire 2 s MUX3_SEL [1:0] $end
$var wire 32 t MUX3_OUT [31:0] $end
$var wire 32 u MUX3_IN3 [31:0] $end
$var wire 32 v MUX3_IN1 [31:0] $end
$upscope $end
$scope module mux_operand1 $end
$var wire 32 w MUX3_IN2 [31:0] $end
$var wire 2 x MUX3_SEL [1:0] $end
$var wire 32 y MUX3_OUT [31:0] $end
$var wire 32 z MUX3_IN3 [31:0] $end
$var wire 32 { MUX3_IN1 [31:0] $end
$upscope $end
$scope module mux_operand2 $end
$var wire 32 | MUX3_IN2 [31:0] $end
$var wire 2 } MUX3_SEL [1:0] $end
$var wire 32 ~ MUX3_OUT [31:0] $end
$var wire 32 !" MUX3_IN3 [31:0] $end
$var wire 32 "" MUX3_IN1 [31:0] $end
$upscope $end
$upscope $end
$scope module forwarding_EXE $end
$var wire 1 % CLK $end
$var wire 5 #" DESTINATION_MEM [4:0] $end
$var wire 1 ' WRITE_BACK_EN_MEM $end
$var wire 1 & WRITE_BACK_EN_WB $end
$var wire 5 $" SW_SOURCE_EXE [4:0] $end
$var wire 5 %" SOURCE2_EXE [4:0] $end
$var wire 5 &" SOURCE1_EXE [4:0] $end
$var wire 5 '" DESTINATION_WB [4:0] $end
$var reg 2 (" OPERAND1_SEL [1:0] $end
$var reg 2 )" OPERAND2_SEL [1:0] $end
$var reg 2 *" SW_OPERAND_SEL [1:0] $end
$upscope $end
$scope module hazard_detection_unit $end
$var wire 5 +" DESTINATION_MEM [4:0] $end
$var wire 1 ," EXE_has_hazard $end
$var wire 1 " FORWARD_EN $end
$var wire 1 -" MEM_has_hazard $end
$var wire 1 ' WRITE_BACK_EN_MEM $end
$var wire 1 ." hazard $end
$var wire 1 /" instruction_is_branch $end
$var wire 1 0" source2_is_valid $end
$var wire 1 ) WRITE_BACK_EN_EXE $end
$var wire 1 F SW_OR_BNE $end
$var wire 5 1" SOURCE2_ID [4:0] $end
$var wire 5 2" SOURCE1_ID [4:0] $end
$var wire 1 U MEM_READ_EN_EXE $end
$var wire 1 9 IS_IMMEDIATE $end
$var wire 1 < HAZARD_DETECTED $end
$var wire 5 3" DESTINATION_EXE [4:0] $end
$var wire 2 4" BRANCH_COMMAND [1:0] $end
$upscope $end
$scope module id_pipe_exe_register $end
$var wire 1 % CLK $end
$var wire 5 5" DESTINATION_IN [4:0] $end
$var wire 1 # RESET $end
$var wire 1 ( WB_EN_IN $end
$var wire 5 6" SOURCE2_IN [4:0] $end
$var wire 5 7" SOURCE1_IN [4:0] $end
$var wire 32 8" REGISTER2_IN [31:0] $end
$var wire 32 9" PC_IN [31:0] $end
$var wire 4 :" OPERATOR_IN [3:0] $end
$var wire 32 ;" OPERAND2_IN [31:0] $end
$var wire 32 <" OPERAND1_IN [31:0] $end
$var wire 1 O MEM_WRITE_EN_IN $end
$var wire 1 T MEM_READ_EN_IN $end
$var wire 1 B BRANCH_TAKEN_IN $end
$var reg 1 C BRANCH_TAKEN_OUT_REG $end
$var reg 5 =" DESTINATION_OUT_REG [4:0] $end
$var reg 1 U MEM_READ_EN_OUT_REG $end
$var reg 1 Q MEM_WRITE_EN_OUT_REG $end
$var reg 32 >" OPERAND1_OUT_REG [31:0] $end
$var reg 32 ?" OPERAND2_OUT_REG [31:0] $end
$var reg 4 @" OPERATOR_OUT_REG [3:0] $end
$var reg 32 A" PC_OUT_REG [31:0] $end
$var reg 5 B" SOURCE1_OUT_REG [4:0] $end
$var reg 5 C" SOURCE2_OUT_REG [4:0] $end
$var reg 32 D" SW_OPERAND_OUT_REG [31:0] $end
$var reg 1 ) WB_EN_OUT_REG $end
$upscope $end
$scope module id_stage_unit $end
$var wire 2 E" BRANCH_COMMAND [1:0] $end
$var wire 1 B BRANCH_TAKEN $end
$var wire 1 % CLK $end
$var wire 1 F" CLk $end
$var wire 1 < HAZARD_DETECTED_IN $end
$var wire 1 9 IS_IMMEDIATE_OUT $end
$var wire 32 G" OPERAND1 [31:0] $end
$var wire 1 # RESET $end
$var wire 1 F SW_OR_BNE_OUT $end
$var wire 32 H" sign_extended_2_mux [31:0] $end
$var wire 1 I" is_immediate $end
$var wire 2 J" control_unit_2_condition [1:0] $end
$var wire 1 K" control_unit_2_and $end
$var wire 1 L" condition_2_and $end
$var wire 1 ( WRITE_BACK_EN $end
$var wire 1 M" SW_or_BNE $end
$var wire 5 N" SOURCE2_REG_BANK [4:0] $end
$var wire 5 O" SOURCE2_FORWARD [4:0] $end
$var wire 5 P" SOURCE1 [4:0] $end
$var wire 32 Q" REGISTER2 [31:0] $end
$var wire 32 R" REGISTER1 [31:0] $end
$var wire 32 S" OPERAND2 [31:0] $end
$var wire 1 O MEMORY_WRITE_EN $end
$var wire 1 T MEMORY_READ_EN $end
$var wire 32 T" INSTRUCTION [31:0] $end
$var wire 4 U" ALU_OPERATOR [3:0] $end
$scope module condition_checker $end
$var wire 1 F" CLK $end
$var wire 32 V" REGISTER2 [31:0] $end
$var wire 32 W" REGISTER1 [31:0] $end
$var wire 2 X" CONTROLLER_BRANCH_COMMAND [1:0] $end
$var reg 1 L" BRANCH_CONDITION $end
$upscope $end
$scope module controller $end
$var wire 1 % CLK $end
$var wire 1 < HAZARD_DETECTED $end
$var wire 6 Y" OP_CODE [5:0] $end
$var reg 2 Z" BRANCH_COMMAND [1:0] $end
$var reg 1 K" BRANCH_EN $end
$var reg 1 I" IS_IMMEDIATE $end
$var reg 1 T MEM_READ_EN $end
$var reg 1 O MEM_WRITE_EN $end
$var reg 4 [" OPERATOR [3:0] $end
$var reg 1 M" SW_OR_BNE $end
$var reg 1 ( WRITE_BACK_EN $end
$upscope $end
$scope module mux_OPERAND2 $end
$var wire 1 I" MUX2_SEL $end
$var wire 32 \" MUX2_OUT [31:0] $end
$var wire 32 ]" MUX2_IN2 [31:0] $end
$var wire 32 ^" MUX2_IN1 [31:0] $end
$upscope $end
$scope module mux_source2 $end
$var wire 5 _" MUX2_IN1 [4:0] $end
$var wire 5 `" MUX2_IN2 [4:0] $end
$var wire 1 M" MUX2_SEL $end
$var wire 5 a" MUX2_OUT [4:0] $end
$upscope $end
$scope module mux_source2_forward $end
$var wire 5 b" MUX2_IN1 [4:0] $end
$var wire 5 c" MUX2_IN2 [4:0] $end
$var wire 1 I" MUX2_SEL $end
$var wire 5 d" MUX2_OUT [4:0] $end
$upscope $end
$scope module sign_extender $end
$var wire 16 e" IN [15:0] $end
$var wire 32 f" OUT [31:0] $end
$upscope $end
$upscope $end
$scope module if_pipe_id_register $end
$var wire 1 % CLK $end
$var wire 1 $ FLUSH $end
$var wire 1 < FREEZE $end
$var wire 1 # RESET $end
$var wire 32 g" PC_IN [31:0] $end
$var wire 32 h" INSTRUCTION_IN [31:0] $end
$var reg 32 i" INSTRUCTION_OUT_REG [31:0] $end
$var reg 32 j" PC_OUT_REG [31:0] $end
$upscope $end
$scope module if_stage_unit $end
$var wire 32 k" BRANCH_OFFSET [31:0] $end
$var wire 1 B BRANCH_TAKEN $end
$var wire 1 % CLK $end
$var wire 1 < FREEZE $end
$var wire 1 # RESET $end
$var wire 32 l" branch_offset_X_4 [31:0] $end
$var wire 32 m" adder_out [31:0] $end
$var wire 32 n" adder_in1 [31:0] $end
$var wire 32 o" PC [31:0] $end
$var wire 32 p" INSTRUCTION [31:0] $end
$scope module PC_register $end
$var wire 1 % CLK $end
$var wire 1 # RESET $end
$var wire 1 q" WRITE_EN $end
$var wire 32 r" REG_IN [31:0] $end
$var reg 32 s" REG_OUT [31:0] $end
$upscope $end
$scope module add_PC $end
$var wire 32 t" ADD_IN2 [31:0] $end
$var wire 32 u" ADD_OUT [31:0] $end
$var wire 32 v" ADD_IN1 [31:0] $end
$upscope $end
$scope module adder_input $end
$var wire 32 w" MUX2_IN1 [31:0] $end
$var wire 32 x" MUX2_IN2 [31:0] $end
$var wire 1 B MUX2_SEL $end
$var wire 32 y" MUX2_OUT [31:0] $end
$upscope $end
$scope module instructions $end
$var wire 32 z" ADDRESS [31:0] $end
$var wire 1 # RESET $end
$var wire 10 {" address [9:0] $end
$var reg 32 |" INSTRUCTION [31:0] $end
$upscope $end
$upscope $end
$scope module mem_pipe_wb_register $end
$var wire 32 }" ALU_RESULT_IN [31:0] $end
$var wire 1 % CLK $end
$var wire 5 ~" DESTINATION_IN [4:0] $end
$var wire 1 S MEM_READ_EN_IN $end
$var wire 1 # RESET $end
$var wire 1 ' WB_EN_IN $end
$var wire 32 !# MEM_READ_OPERAND_IN [31:0] $end
$var reg 32 "# ALU_RESULT_OUT_REG [31:0] $end
$var reg 5 ## DESTINATION_OUT_REG [4:0] $end
$var reg 1 R MEM_READ_EN_OUT_REG $end
$var reg 32 $# MEM_READ_OPERAND_OUT_REG [31:0] $end
$var reg 1 & WB_EN_OUT_REG $end
$upscope $end
$scope module mem_stage_unit $end
$var wire 32 %# ALU_RESULT [31:0] $end
$var wire 1 % CLK $end
$var wire 1 S MEM_READ_EN $end
$var wire 1 P MEM_WRITE_EN $end
$var wire 1 # RESET $end
$var wire 32 &# SW_OPERAND [31:0] $end
$var wire 32 '# DATA_MEMORY_OUT [31:0] $end
$scope module data_memory $end
$var wire 32 (# ADDRESS [31:0] $end
$var wire 1 % CLK $end
$var wire 32 )# DATA_IN [31:0] $end
$var wire 1 S READ_EN $end
$var wire 1 # RESET $end
$var wire 1 P WRITE_EN $end
$var wire 32 *# base_address [31:0] $end
$var reg 32 +# DATA_OUT_REG [31:0] $end
$var integer 32 ,# i [31:0] $end
$upscope $end
$upscope $end
$scope module reg_bank $end
$var wire 1 % CLK $end
$var wire 5 -# DESTINATION_REG [4:0] $end
$var wire 1 # RESET $end
$var wire 5 .# SOURCE_REG1 [4:0] $end
$var wire 5 /# SOURCE_REG2 [4:0] $end
$var wire 1 & WRITE_ENABLE $end
$var wire 32 0# DATA_IN [31:0] $end
$var reg 32 1# DATA1_OUT_REG [31:0] $end
$var reg 32 2# DATA2_OUT_REG [31:0] $end
$var integer 32 3# i [31:0] $end
$upscope $end
$scope module wb_stage_unit $end
$var wire 32 4# ALU_RESULT [31:0] $end
$var wire 32 5# MEM_DATA [31:0] $end
$var wire 1 R MEM_READ_EN $end
$var wire 32 6# WB_RESULT [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 6#
b0 5#
b0 4#
bx 3#
bx 2#
bx 1#
b0 0#
b0 /#
b0 .#
b0 -#
b10000000000 ,#
bx +#
b0 *#
b0 )#
b0 (#
bx '#
b0 &#
b0 %#
b0 $#
b0 ##
b0 "#
bx !#
b0 ~"
b0 }"
bx |"
b0 {"
b0 z"
bx0x00 y"
bx0000 x"
b100 w"
bx0x00 v"
bx u"
b0 t"
b0 s"
bx r"
1q"
bx p"
b0 o"
bx0x00 n"
bx m"
bx0000 l"
bx k"
b0 j"
b0 i"
bx h"
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
bx ^"
b0 ]"
bx \"
bx ["
bx Z"
b0 Y"
bx X"
bx W"
bx V"
bx U"
b0 T"
bx S"
bx R"
bx Q"
b0 P"
b0 O"
b0 N"
xM"
xL"
xK"
bx J"
xI"
b0 H"
bx G"
zF"
bx E"
b0 D"
b0 C"
b0 B"
b0 A"
b0 @"
b0 ?"
b0 >"
b0 ="
bx <"
bx ;"
bx :"
b0 9"
bx 8"
b0 7"
b0 6"
b0 5"
bx 4"
b0 3"
b0 2"
b0 1"
x0"
x/"
0."
0-"
0,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b0 $"
b0 #"
b0 ""
b0 !"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
b0 t
b0 s
b0 r
b0 q
b0 p
b0 o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
b0 _
b0 ^
b0 ]
b0 \
b0 [
b0 Z
b0 Y
b0 X
b0 W
b0 V
0U
xT
0S
0R
0Q
0P
xO
b0 N
b0 M
b0 L
b0 K
b0 J
b0 I
b0 H
b0 G
xF
b0 E
bx D
0C
xB
bx A
b0 @
b0 ?
b0 >
b0 =
0<
b0 ;
bx :
x9
b0 8
bx 7
b0 6
b0 5
bx 4
b0 3
b0 2
bx 1
bx 0
bx /
b0 .
b0 -
b0 ,
b0 +
b0 *
0)
x(
0'
0&
1%
z$
1#
1"
1!
$end
#50
b100 m"
b100 r"
b100 u"
b100 n"
b100 v"
b100 y"
10"
0B
0/"
0K"
b0 1
b0 :"
b0 U"
b0 ["
b0 D
b0 4"
b0 E"
b0 J"
b0 X"
b0 Z"
09
0I"
0F
0M"
0(
0T
0O
b100000 3#
0%
0!
#100
b10000000000 ,#
1%
1!
#105
0#
#150
b0 l"
b0 x"
b0 4
b0 ;"
b0 S"
b0 \"
b0 k"
b0 /
b0 8"
b0 Q"
b0 V"
b0 ^"
b0 2#
b0 7
b0 <"
b0 G"
b0 0
b0 R"
b0 W"
b0 1#
0%
0!
#200
bx H"
bx ]"
bx f"
bx +
bx 6"
bx O"
bx d"
bx *
bx 1"
bx N"
bx a"
bx /#
b100 {"
b10000000001000000000000000001010 :
b10000000001000000000000000001010 h"
b10000000001000000000000000001010 p"
b10000000001000000000000000001010 |"
bx .
bx 2"
bx 7"
bx P"
bx .#
bx e"
bx b"
bx `"
bx _"
bx Y"
bx 5"
b1000 m"
b1000 r"
b1000 u"
b100 L
b100 g"
b100 o"
b100 s"
b100 t"
b100 z"
bx ;
bx T"
bx i"
bx @
bx $#
bx 5#
1%
1!
#250
bx0000 l"
bx0000 x"
bx 4
bx ;"
bx S"
bx \"
bx k"
bx /
bx 8"
bx Q"
bx V"
bx ^"
bx 2#
bx 7
bx <"
bx G"
bx 0
bx R"
bx W"
bx 1#
0%
0!
#300
bx b
bx o
bx ~
bx c
bx p
bx y
bx I
bx Y
bx e
bx t
b1010 H"
b1010 ]"
b1010 f"
b0 +
b0 6"
b0 O"
b0 d"
b0 *
b0 1"
b0 N"
b0 a"
b0 /#
b0 .
b0 2"
b0 7"
b0 P"
b0 .#
b1010 e"
b0 b"
b1 `"
b0 _"
b100000 Y"
b1 5"
b1000 {"
b100010000000000100000000000 :
b100010000000000100000000000 h"
b100010000000000100000000000 p"
b100010000000000100000000000 |"
bx ,
bx %"
bx C"
bx -
bx &"
bx B"
bx 5
bx i
bx ""
bx ?"
bx 8
bx k
bx {
bx >"
bx J
bx f
bx v
bx D"
bx ?
bx [
bx $"
bx 3"
bx ="
b100 M
b100 9"
b100 j"
b10000000001000000000000000001010 ;
b10000000001000000000000000001010 T"
b10000000001000000000000000001010 i"
b1100 m"
b1100 r"
b1100 u"
b1000 L
b1000 g"
b1000 o"
b1000 s"
b1000 t"
b1000 z"
1%
1!
#350
00"
19
1I"
1(
b10100000 l"
b10100000 x"
b1010 4
b1010 ;"
b1010 S"
b1010 \"
b1010 k"
b0 /
b0 8"
b0 Q"
b0 V"
b0 ^"
b0 2#
b0 7
b0 <"
b0 G"
b0 0
b0 R"
b0 W"
b0 1#
0%
0!
#400
b1000000000000000 l"
b1000000000000000 x"
b100000000000 4
b100000000000 ;"
b100000000000 S"
b100000000000 \"
b100000000000 k"
b100000000000 H"
b100000000000 ]"
b100000000000 f"
b1 *
b1 1"
b1 N"
b1 a"
b1 /#
b1010 b
b1010 o
b1010 ~
b0 c
b0 p
b0 y
b0 I
b0 Y
b0 e
b0 t
0."
b1100 {"
bx :
bx h"
bx p"
bx |"
b100000000000 e"
b1 b"
b10 `"
b1 _"
b1 Y"
b10 5"
0,"
b10000 m"
b10000 r"
b10000 u"
b1100 L
b1100 g"
b1100 o"
b1100 s"
b1100 t"
b1100 z"
bx X
bx \
bx l
bx q
b1000 M
b1000 9"
b1000 j"
b100010000000000100000000000 ;
b100010000000000100000000000 T"
b100010000000000100000000000 i"
b0 ,
b0 %"
b0 C"
b0 -
b0 &"
b0 B"
b100 N
b100 Z
b100 A"
b1010 5
b1010 i
b1010 ""
b1010 ?"
b0 8
b0 k
b0 {
b0 >"
b0 J
b0 f
b0 v
b0 D"
b1 ?
b1 [
b1 $"
b1 3"
b1 ="
1)
bx >
bx ^
bx #"
bx +"
bx ~"
bx H
bx `
bx &#
bx )#
1%
1!
#450
1."
1,"
b0 l"
b0 x"
10"
b0 4
b0 ;"
b0 S"
b0 \"
b0 k"
b1 +
b1 6"
b1 O"
b1 d"
09
0I"
1(
0%
0!
#500
x."
bx0xxxxxxxx00 *#
x,"
b0 b
b0 o
b0 ~
bx H"
bx ]"
bx f"
bx +
bx 6"
bx O"
bx d"
bx *
bx 1"
bx N"
bx a"
bx /#
x-"
bx .
bx 2"
bx 7"
bx P"
bx .#
bx e"
bx b"
bx `"
bx _"
bx Y"
bx 5"
b10000 {"
bx =
bx '"
bx ##
bx -#
b1 >
b1 ^
b1 #"
b1 +"
b1 ~"
b0 H
b0 `
b0 &#
b0 )#
bx W
bx ]
bx a
bx r
bx w
bx |
bx }"
bx %#
bx (#
b100 K
b100 _
1'
b1 ,
b1 %"
b1 C"
b1000 N
b1000 Z
b1000 A"
b0 5
b0 i
b0 ""
b0 ?"
b10 ?
b10 [
b10 $"
b10 3"
b10 ="
1)
b1100 M
b1100 9"
b1100 j"
bx ;
bx T"
bx i"
b1010 X
b1010 \
b1010 l
b1010 q
b10100 m"
b10100 r"
b10100 u"
b10000 L
b10000 g"
b10000 o"
b10000 s"
b10000 t"
b10000 z"
1%
1!
#550
0(
bx0000 l"
bx0000 x"
bx 4
bx ;"
bx S"
bx \"
bx k"
bx /
bx 8"
bx Q"
bx V"
bx ^"
bx 2#
bx 7
bx <"
bx G"
bx 0
bx R"
bx W"
bx 1#
0%
0!
#600
b1000 *#
b1010 b
b1010 o
b1010 ~
bx c
bx p
bx y
bx I
bx Y
bx e
bx t
b10100 {"
0,"
bx E
bx g
bx u
bx z
bx !"
bx 0#
bx 6#
b1 3
b1 h
b1 }
b1 )"
b11000 m"
b11000 r"
b11000 u"
b10100 L
b10100 g"
b10100 o"
b10100 s"
b10100 t"
b10100 z"
b0 X
b0 \
b0 l
b0 q
b10000 M
b10000 9"
b10000 j"
bx ,
bx %"
bx C"
bx -
bx &"
bx B"
b1100 N
b1100 Z
b1100 A"
bx 5
bx i
bx ""
bx ?"
bx 8
bx k
bx {
bx >"
bx J
bx f
bx v
bx D"
bx ?
bx [
bx $"
bx 3"
bx ="
0)
b10 >
b10 ^
b10 #"
b10 +"
b10 ~"
b1010 W
b1010 ]
b1010 a
b1010 r
b1010 w
b1010 |
b1010 }"
b1010 %#
b1010 (#
b1000 K
b1000 _
bx V
bx "#
bx 4#
b1 =
b1 '"
b1 ##
b1 -#
1&
1%
1!
#650
0%
0!
#700
b0 *#
0."
bx b
bx o
bx ~
b1010 E
b1010 g
b1010 u
b1010 z
b1010 !"
b1010 0#
b1010 6#
0-"
b11000 {"
b1010 V
b1010 "#
b1010 4#
b10 =
b10 '"
b10 ##
b10 -#
bx >
bx ^
bx #"
bx +"
bx ~"
bx H
bx `
bx &#
bx )#
b0 W
b0 ]
b0 a
b0 r
b0 w
b0 |
b0 }"
b0 %#
b0 (#
b1100 K
b1100 _
0'
b10000 N
b10000 Z
b10000 A"
b10100 M
b10100 9"
b10100 j"
bx X
bx \
bx l
bx q
b11100 m"
b11100 r"
b11100 u"
b11000 L
b11000 g"
b11000 o"
b11000 s"
b11000 t"
b11000 z"
b0 3
b0 h
b0 }
b0 )"
1%
1!
#750
0%
0!
#800
bx0xxxxxxxx00 *#
b11100 {"
b0 E
b0 g
b0 u
b0 z
b0 !"
b0 0#
b0 6#
b100000 m"
b100000 r"
b100000 u"
b11100 L
b11100 g"
b11100 o"
b11100 s"
b11100 t"
b11100 z"
b11000 M
b11000 9"
b11000 j"
b10100 N
b10100 Z
b10100 A"
bx W
bx ]
bx a
bx r
bx w
bx |
bx }"
bx %#
bx (#
b10000 K
b10000 _
b0 V
b0 "#
b0 4#
bx =
bx '"
bx ##
bx -#
0&
1%
1!
#850
0%
0!
#900
bx E
bx g
bx u
bx z
bx !"
bx 0#
bx 6#
b100000 {"
bx V
bx "#
bx 4#
b10100 K
b10100 _
b11000 N
b11000 Z
b11000 A"
b11100 M
b11100 9"
b11100 j"
b100100 m"
b100100 r"
b100100 u"
b100000 L
b100000 g"
b100000 o"
b100000 s"
b100000 t"
b100000 z"
1%
1!
#950
0%
0!
#1000
b100100 {"
b101000 m"
b101000 r"
b101000 u"
b100100 L
b100100 g"
b100100 o"
b100100 s"
b100100 t"
b100100 z"
b100000 M
b100000 9"
b100000 j"
b11100 N
b11100 Z
b11100 A"
b11000 K
b11000 _
1%
1!
#1050
0%
0!
#1100
b101000 {"
b11100 K
b11100 _
b100000 N
b100000 Z
b100000 A"
b100100 M
b100100 9"
b100100 j"
b101100 m"
b101100 r"
b101100 u"
b101000 L
b101000 g"
b101000 o"
b101000 s"
b101000 t"
b101000 z"
1%
1!
#1150
0%
0!
#1200
b101100 {"
b110000 m"
b110000 r"
b110000 u"
b101100 L
b101100 g"
b101100 o"
b101100 s"
b101100 t"
b101100 z"
b101000 M
b101000 9"
b101000 j"
b100100 N
b100100 Z
b100100 A"
b100000 K
b100000 _
1%
1!
#1250
0%
0!
#1300
b110000 {"
b100100 K
b100100 _
b101000 N
b101000 Z
b101000 A"
b101100 M
b101100 9"
b101100 j"
b110100 m"
b110100 r"
b110100 u"
b110000 L
b110000 g"
b110000 o"
b110000 s"
b110000 t"
b110000 z"
1%
1!
#1350
0%
0!
#1400
b110100 {"
b111000 m"
b111000 r"
b111000 u"
b110100 L
b110100 g"
b110100 o"
b110100 s"
b110100 t"
b110100 z"
b110000 M
b110000 9"
b110000 j"
b101100 N
b101100 Z
b101100 A"
b101000 K
b101000 _
1%
1!
#1450
0%
0!
#1500
b111000 {"
b101100 K
b101100 _
b110000 N
b110000 Z
b110000 A"
b110100 M
b110100 9"
b110100 j"
b111100 m"
b111100 r"
b111100 u"
b111000 L
b111000 g"
b111000 o"
b111000 s"
b111000 t"
b111000 z"
1%
1!
#1550
0%
0!
#1600
b111100 {"
b1000000 m"
b1000000 r"
b1000000 u"
b111100 L
b111100 g"
b111100 o"
b111100 s"
b111100 t"
b111100 z"
b111000 M
b111000 9"
b111000 j"
b110100 N
b110100 Z
b110100 A"
b110000 K
b110000 _
1%
1!
#1650
0%
0!
#1700
b1000000 {"
b110100 K
b110100 _
b111000 N
b111000 Z
b111000 A"
b111100 M
b111100 9"
b111100 j"
b1000100 m"
b1000100 r"
b1000100 u"
b1000000 L
b1000000 g"
b1000000 o"
b1000000 s"
b1000000 t"
b1000000 z"
1%
1!
#1750
0%
0!
#1800
b1000100 {"
b1001000 m"
b1001000 r"
b1001000 u"
b1000100 L
b1000100 g"
b1000100 o"
b1000100 s"
b1000100 t"
b1000100 z"
b1000000 M
b1000000 9"
b1000000 j"
b111100 N
b111100 Z
b111100 A"
b111000 K
b111000 _
1%
1!
#1850
0%
0!
#1900
b1001000 {"
b111100 K
b111100 _
b1000000 N
b1000000 Z
b1000000 A"
b1000100 M
b1000100 9"
b1000100 j"
b1001100 m"
b1001100 r"
b1001100 u"
b1001000 L
b1001000 g"
b1001000 o"
b1001000 s"
b1001000 t"
b1001000 z"
1%
1!
#1950
0%
0!
#2000
b1001100 {"
b1010000 m"
b1010000 r"
b1010000 u"
b1001100 L
b1001100 g"
b1001100 o"
b1001100 s"
b1001100 t"
b1001100 z"
b1001000 M
b1001000 9"
b1001000 j"
b1000100 N
b1000100 Z
b1000100 A"
b1000000 K
b1000000 _
1%
1!
#2050
0%
0!
#2100
b1010000 {"
b1000100 K
b1000100 _
b1001000 N
b1001000 Z
b1001000 A"
b1001100 M
b1001100 9"
b1001100 j"
b1010100 m"
b1010100 r"
b1010100 u"
b1010000 L
b1010000 g"
b1010000 o"
b1010000 s"
b1010000 t"
b1010000 z"
1%
1!
#2150
0%
0!
#2200
b1010100 {"
b1011000 m"
b1011000 r"
b1011000 u"
b1010100 L
b1010100 g"
b1010100 o"
b1010100 s"
b1010100 t"
b1010100 z"
b1010000 M
b1010000 9"
b1010000 j"
b1001100 N
b1001100 Z
b1001100 A"
b1001000 K
b1001000 _
1%
1!
#2250
0%
0!
#2300
b1011000 {"
b1001100 K
b1001100 _
b1010000 N
b1010000 Z
b1010000 A"
b1010100 M
b1010100 9"
b1010100 j"
b1011100 m"
b1011100 r"
b1011100 u"
b1011000 L
b1011000 g"
b1011000 o"
b1011000 s"
b1011000 t"
b1011000 z"
1%
1!
#2350
0%
0!
#2400
b1011100 {"
b1100000 m"
b1100000 r"
b1100000 u"
b1011100 L
b1011100 g"
b1011100 o"
b1011100 s"
b1011100 t"
b1011100 z"
b1011000 M
b1011000 9"
b1011000 j"
b1010100 N
b1010100 Z
b1010100 A"
b1010000 K
b1010000 _
1%
1!
#2450
0%
0!
#2500
b1100000 {"
b1010100 K
b1010100 _
b1011000 N
b1011000 Z
b1011000 A"
b1011100 M
b1011100 9"
b1011100 j"
b1100100 m"
b1100100 r"
b1100100 u"
b1100000 L
b1100000 g"
b1100000 o"
b1100000 s"
b1100000 t"
b1100000 z"
1%
1!
#2550
0%
0!
#2600
b1100100 {"
b1101000 m"
b1101000 r"
b1101000 u"
b1100100 L
b1100100 g"
b1100100 o"
b1100100 s"
b1100100 t"
b1100100 z"
b1100000 M
b1100000 9"
b1100000 j"
b1011100 N
b1011100 Z
b1011100 A"
b1011000 K
b1011000 _
1%
1!
#2650
0%
0!
#2700
b1101000 {"
b1011100 K
b1011100 _
b1100000 N
b1100000 Z
b1100000 A"
b1100100 M
b1100100 9"
b1100100 j"
b1101100 m"
b1101100 r"
b1101100 u"
b1101000 L
b1101000 g"
b1101000 o"
b1101000 s"
b1101000 t"
b1101000 z"
1%
1!
#2750
0%
0!
#2800
b1101100 {"
b1110000 m"
b1110000 r"
b1110000 u"
b1101100 L
b1101100 g"
b1101100 o"
b1101100 s"
b1101100 t"
b1101100 z"
b1101000 M
b1101000 9"
b1101000 j"
b1100100 N
b1100100 Z
b1100100 A"
b1100000 K
b1100000 _
1%
1!
#2850
0%
0!
#2900
b1110000 {"
b1100100 K
b1100100 _
b1101000 N
b1101000 Z
b1101000 A"
b1101100 M
b1101100 9"
b1101100 j"
b1110100 m"
b1110100 r"
b1110100 u"
b1110000 L
b1110000 g"
b1110000 o"
b1110000 s"
b1110000 t"
b1110000 z"
1%
1!
#2950
0%
0!
#3000
b1110100 {"
b1111000 m"
b1111000 r"
b1111000 u"
b1110100 L
b1110100 g"
b1110100 o"
b1110100 s"
b1110100 t"
b1110100 z"
b1110000 M
b1110000 9"
b1110000 j"
b1101100 N
b1101100 Z
b1101100 A"
b1101000 K
b1101000 _
1%
1!
#3050
0%
0!
#3100
b1111000 {"
b1101100 K
b1101100 _
b1110000 N
b1110000 Z
b1110000 A"
b1110100 M
b1110100 9"
b1110100 j"
b1111100 m"
b1111100 r"
b1111100 u"
b1111000 L
b1111000 g"
b1111000 o"
b1111000 s"
b1111000 t"
b1111000 z"
1%
1!
#3150
0%
0!
#3200
b1111100 {"
b10000000 m"
b10000000 r"
b10000000 u"
b1111100 L
b1111100 g"
b1111100 o"
b1111100 s"
b1111100 t"
b1111100 z"
b1111000 M
b1111000 9"
b1111000 j"
b1110100 N
b1110100 Z
b1110100 A"
b1110000 K
b1110000 _
1%
1!
#3250
0%
0!
#3300
b10000000 {"
b1110100 K
b1110100 _
b1111000 N
b1111000 Z
b1111000 A"
b1111100 M
b1111100 9"
b1111100 j"
b10000100 m"
b10000100 r"
b10000100 u"
b10000000 L
b10000000 g"
b10000000 o"
b10000000 s"
b10000000 t"
b10000000 z"
1%
1!
#3350
0%
0!
#3400
b10000100 {"
b10001000 m"
b10001000 r"
b10001000 u"
b10000100 L
b10000100 g"
b10000100 o"
b10000100 s"
b10000100 t"
b10000100 z"
b10000000 M
b10000000 9"
b10000000 j"
b1111100 N
b1111100 Z
b1111100 A"
b1111000 K
b1111000 _
1%
1!
#3450
0%
0!
#3500
b10001000 {"
b1111100 K
b1111100 _
b10000000 N
b10000000 Z
b10000000 A"
b10000100 M
b10000100 9"
b10000100 j"
b10001100 m"
b10001100 r"
b10001100 u"
b10001000 L
b10001000 g"
b10001000 o"
b10001000 s"
b10001000 t"
b10001000 z"
1%
1!
#3550
0%
0!
#3600
b10001100 {"
b10010000 m"
b10010000 r"
b10010000 u"
b10001100 L
b10001100 g"
b10001100 o"
b10001100 s"
b10001100 t"
b10001100 z"
b10001000 M
b10001000 9"
b10001000 j"
b10000100 N
b10000100 Z
b10000100 A"
b10000000 K
b10000000 _
1%
1!
#3650
0%
0!
#3700
b10010000 {"
b10000100 K
b10000100 _
b10001000 N
b10001000 Z
b10001000 A"
b10001100 M
b10001100 9"
b10001100 j"
b10010100 m"
b10010100 r"
b10010100 u"
b10010000 L
b10010000 g"
b10010000 o"
b10010000 s"
b10010000 t"
b10010000 z"
1%
1!
#3750
0%
0!
#3800
b10010100 {"
b10011000 m"
b10011000 r"
b10011000 u"
b10010100 L
b10010100 g"
b10010100 o"
b10010100 s"
b10010100 t"
b10010100 z"
b10010000 M
b10010000 9"
b10010000 j"
b10001100 N
b10001100 Z
b10001100 A"
b10001000 K
b10001000 _
1%
1!
#3850
0%
0!
#3900
b10011000 {"
b10001100 K
b10001100 _
b10010000 N
b10010000 Z
b10010000 A"
b10010100 M
b10010100 9"
b10010100 j"
b10011100 m"
b10011100 r"
b10011100 u"
b10011000 L
b10011000 g"
b10011000 o"
b10011000 s"
b10011000 t"
b10011000 z"
1%
1!
#3950
0%
0!
#4000
b10011100 {"
b10100000 m"
b10100000 r"
b10100000 u"
b10011100 L
b10011100 g"
b10011100 o"
b10011100 s"
b10011100 t"
b10011100 z"
b10011000 M
b10011000 9"
b10011000 j"
b10010100 N
b10010100 Z
b10010100 A"
b10010000 K
b10010000 _
1%
1!
#4050
0%
0!
#4100
b10100000 {"
b10010100 K
b10010100 _
b10011000 N
b10011000 Z
b10011000 A"
b10011100 M
b10011100 9"
b10011100 j"
b10100100 m"
b10100100 r"
b10100100 u"
b10100000 L
b10100000 g"
b10100000 o"
b10100000 s"
b10100000 t"
b10100000 z"
1%
1!
#4150
0%
0!
#4200
b10100100 {"
b10101000 m"
b10101000 r"
b10101000 u"
b10100100 L
b10100100 g"
b10100100 o"
b10100100 s"
b10100100 t"
b10100100 z"
b10100000 M
b10100000 9"
b10100000 j"
b10011100 N
b10011100 Z
b10011100 A"
b10011000 K
b10011000 _
1%
1!
#4250
0%
0!
#4300
b10101000 {"
b10011100 K
b10011100 _
b10100000 N
b10100000 Z
b10100000 A"
b10100100 M
b10100100 9"
b10100100 j"
b10101100 m"
b10101100 r"
b10101100 u"
b10101000 L
b10101000 g"
b10101000 o"
b10101000 s"
b10101000 t"
b10101000 z"
1%
1!
#4350
0%
0!
#4400
b10101100 {"
b10110000 m"
b10110000 r"
b10110000 u"
b10101100 L
b10101100 g"
b10101100 o"
b10101100 s"
b10101100 t"
b10101100 z"
b10101000 M
b10101000 9"
b10101000 j"
b10100100 N
b10100100 Z
b10100100 A"
b10100000 K
b10100000 _
1%
1!
#4450
0%
0!
#4500
b10110000 {"
b10100100 K
b10100100 _
b10101000 N
b10101000 Z
b10101000 A"
b10101100 M
b10101100 9"
b10101100 j"
b10110100 m"
b10110100 r"
b10110100 u"
b10110000 L
b10110000 g"
b10110000 o"
b10110000 s"
b10110000 t"
b10110000 z"
1%
1!
#4550
0%
0!
#4600
b10110100 {"
b10111000 m"
b10111000 r"
b10111000 u"
b10110100 L
b10110100 g"
b10110100 o"
b10110100 s"
b10110100 t"
b10110100 z"
b10110000 M
b10110000 9"
b10110000 j"
b10101100 N
b10101100 Z
b10101100 A"
b10101000 K
b10101000 _
1%
1!
#4650
0%
0!
#4700
b10111000 {"
b10101100 K
b10101100 _
b10110000 N
b10110000 Z
b10110000 A"
b10110100 M
b10110100 9"
b10110100 j"
b10111100 m"
b10111100 r"
b10111100 u"
b10111000 L
b10111000 g"
b10111000 o"
b10111000 s"
b10111000 t"
b10111000 z"
1%
1!
#4750
0%
0!
#4800
b10111100 {"
b11000000 m"
b11000000 r"
b11000000 u"
b10111100 L
b10111100 g"
b10111100 o"
b10111100 s"
b10111100 t"
b10111100 z"
b10111000 M
b10111000 9"
b10111000 j"
b10110100 N
b10110100 Z
b10110100 A"
b10110000 K
b10110000 _
1%
1!
#4850
0%
0!
#4900
b11000000 {"
b10110100 K
b10110100 _
b10111000 N
b10111000 Z
b10111000 A"
b10111100 M
b10111100 9"
b10111100 j"
b11000100 m"
b11000100 r"
b11000100 u"
b11000000 L
b11000000 g"
b11000000 o"
b11000000 s"
b11000000 t"
b11000000 z"
1%
1!
#4950
0%
0!
#5000
b11000100 {"
b11001000 m"
b11001000 r"
b11001000 u"
b11000100 L
b11000100 g"
b11000100 o"
b11000100 s"
b11000100 t"
b11000100 z"
b11000000 M
b11000000 9"
b11000000 j"
b10111100 N
b10111100 Z
b10111100 A"
b10111000 K
b10111000 _
1%
1!
